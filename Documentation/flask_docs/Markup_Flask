Table of Contents
Installation
Creating a Simple Application
Routing
Templates
Static Files
Forms and Request Handling
Database Integration
Extensions
Deployment
Installation
To install Flask, you need to have Python installed on your system. You can install Flask using pip:
bash
pip install Flask

Creating a Simple Application
Here is a minimal example of a Flask application:
python
from flask import Flask

app = Flask(__name__)

@app.route("/")
def hello_world():
    return "<p>Hello, World!</p>"

if __name__ == "__main__":
    app.run(debug=True)

To run the application, use the following command:
bash
flask run

Routing
Flask uses decorators to define routes. Here is an example of how to define a route:
python
@app.route("/hello")
def hello():
    return "Hello, World!"

You can also define routes with dynamic segments:
python
@app.route("/user/<username>")
def show_user_profile(username):
    return f"User {username}"

Templates
Flask uses the Jinja2 templating engine to render HTML. Here is an example of a template:
xml
<!doctype html>
<html>
  <head>
    <title>Hello, {{ name }}!</title>
  </head>
  <body>
    <h1>Hello, {{ name }}!</h1>
  </body>
</html>

To render this template from a view function:
python
from flask import render_template

@app.route("/hello/<name>")
def hello(name):
    return render_template("hello.html", name=name)

Static Files
To serve static files, create a folder named static in your project directory. You can then access these files via /static/<filename>.
Example:
xml
<link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">

Forms and Request Handling
Flask makes it easy to handle form data and HTTP requests. Here is an example of handling a POST request:
python
from flask import request

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]
        return f"Logged in as {username}"
    return '''
        <form method="post">
            <p><input type=text name=username>
            <p><input type=password name=password>
            <p><input type=submit value=Login>
        </form>
    '''

Database Integration
Flask can be integrated with various databases. Here is an example using SQLite with SQLAlchemy:
python
from flask import Flask
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///test.db"
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)

    def __repr__(self):
        return f"<User {self.username}>"

@app.route("/add_user/<username>")
def add_user(username):
    user = User(username=username)
    db.session.add(user)
    db.session.commit()
    return f"Added user {username}"

Extensions
Flask supports a wide range of extensions to add functionality to your application. Some popular extensions include:
Flask-WTF for form handling
Flask-Login for user authentication
Flask-Migrate for database migrations
Deployment
To deploy a Flask application, you can use a WSGI server like Gunicorn. Here is an example command to run a Flask app with Gunicorn:
bash
gunicorn -w 4 myapp:app

Make sure to configure your web server (e.g., Nginx or Apache) to forward requests to Gunicorn.
Conclusion
Flask is a powerful and flexible framework that allows you to build web applications quickly and efficiently. Its simplicity and extensibility make it a great choice for both beginners and experienced developers.
For more detailed information, refer to the official Flask documentation.
